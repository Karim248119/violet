// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Menu {
  id          Int        @id @default(autoincrement())
  name        String
  icon        String?
  items       MenuItem[] 
  createdAt   DateTime   @default(now())
}

model MenuItem {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  image       String?
  menuId      Int
  menu        Menu        @relation(fields: [menuId], references: [id])
  orderItems  OrderItem[] // One-to-Many relationship with OrderItem
  createdAt   DateTime    @default(now())
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String    // You can hash this using a library like bcrypt
  role        String    @default("customer") // Possible values: "admin", "staff", "customer"
  orders      Order[]   // One-to-Many relationship with Order
  createdAt   DateTime  @default(now())
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[] // One-to-Many relationship with OrderItem
  total       Float       // Calculated total price of the order
  status      String      @default("pending") // Possible values: "pending", "completed", "cancelled"
  createdAt   DateTime    @default(now())
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  orderId     Int
  order       Order     @relation(fields: [orderId], references: [id])
  menuItemId  Int
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id])
  quantity    Int
  createdAt   DateTime  @default(now())
}
